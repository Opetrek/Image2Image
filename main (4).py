import telebot
import requests
import webuiapi

from telebot import types
from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image
from g4f.client import Client

# TOKEN="5995667124:AAFoRVCAdEmdTX-3a8i5uLT7Lqj42_C_phw"
# bot = telebot.TeleBot('5995667124:AAFoRVCAdEmdTX-3a8i5uLT7Lqj42_C_phw')

TOKEN = "6691027735:AAHlJ6T4S9Hyzj862MKDbK3P_ckM-0JW-IA"
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫! –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å.",
                     reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == '–ù–∞—á–∞—Ç—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°—Ç—Ä–æ–≥–æ –ø–æ —Å–∫–µ—Ç—á—É')
        btn2 = types.KeyboardButton('–£–ª—É—á—à–∏—Ç—å —Å–∫–µ—Ç—á')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=markup)

    elif message.text in ['–°—Ç—Ä–æ–≥–æ –ø–æ —Å–∫–µ—Ç—á—É', '–£–ª—É—á—à–∏—Ç—å —Å–∫–µ—Ç—á']:
        mode = 'canny' if message.text == '–°—Ç—Ä–æ–≥–æ –ø–æ —Å–∫–µ—Ç—á—É' else 'depth_anything'
        model = 'control_v11p_sd15_canny [d14c016b]' if message.text == '–°—Ç—Ä–æ–≥–æ –ø–æ —Å–∫–µ—Ç—á—É' else 'control_v11f1p_sd15_depth [cfd03158]'
        weights = (0.3, 0.7) if message.text == '–°—Ç—Ä–æ–≥–æ –ø–æ —Å–∫–µ—Ç—á—É' else (0.4, 0.6)

        bot.send_message(message.from_user.id, "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        bot.register_next_step_handler(message, process_photo, *weights, mode, model)


def process_photo(message, a, b, c, d):
    if message.content_type == 'photo':
        photo_data = message.photo[-1]
        file_id = photo_data.file_id
        file_path = bot.get_file(file_id)
        photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path.file_path}"

        processor = BlipProcessor.from_pretrained("unography/blip-long-cap")
        model = BlipForConditionalGeneration.from_pretrained("unography/blip-long-cap")
        raw_image = Image.open(requests.get(photo_url, stream=True).raw).convert('RGB')
        text = "a photography of"
        inputs = processor(raw_image, text, return_tensors="pt")
        out = model.generate(**inputs)
        caption = processor.decode(out[0], skip_special_tokens=True)
        """
        client = Client()
        prompt_request = (
            "–ü–æ–º–æ–≥–∏ –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –Ω–∏–∂–µ. –¢—ã —Å–æ–∑–¥–∞–µ—à—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í —Ç–µ–∫—Å—Ç–µ –º–æ–≥—É—Ç "
            "–≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–≥–æ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º - —É–±–µ—Ä–∏ –∏–ª–∏ –∑–∞–º–µ–Ω–∏ —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, "
            "—á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. "
            "–ü—Ä–∞–≤–∏–ª–∞: "
            "1) –ø—Ä–æ–º–ø—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–π –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º—ã—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ "
            "2) –≤ –ø—Ä–æ–º–ø—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª—é–±—ã—Ö —Å—Ç–∏–ª–µ–π –∫—Ä–æ–º–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ. "
            "3) –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—É–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. "
            "–í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç."
        )

        prompt = prompt_request + caption

        def gpt(prompt):
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
            )
            return response.choices[0].message.content

        detailed_prompt = gpt(prompt)
        additional_prompt = "contrast, colorful, photorealistic image, high detalization, clarity, blurred background, 4k, realistic proportions, natural proportions, beautiful body and face, smooth the drawn lines, remove extra lines"
        final_prompt = additional_prompt + ' ' + detailed_prompt
        print(final_prompt)
        """

        final_prompt = caption
        api = webuiapi.WebUIApi(host='127.0.0.1', port=7860)
        options = {'sd_model_checkpoint': '0001softrealistic_v187xxx.safetensors [877aac4a95]'}
        api.set_options(options)

        image = raw_image
        unit1 = webuiapi.ControlNetUnit(input_image=image, module=c, model=d, weight=a)
        unit2 = webuiapi.ControlNetUnit(input_image=image, module='lineart_standard',
                                        model='control_v11p_sd15_lineart [43d4be0d]', weight=b)

        result = api.img2img(
            prompt=final_prompt,
            negative_prompt="Unrealistic styles, cartoon, anime, black and white, non-contrast, ugly face, ugly body shape, anatomical errors, disproportionate body parts, pale colors, not according to image, effects that may make the image blurry or unrealistic, ugly eyes, unreal eyes",
            images=[image],
            width=512,
            height=512,
            controlnet_units=[unit1, unit2],
            sampler_name="Euler a",
            cfg_scale=7,
        )
        generated_image = result.image
        generated_image.save('generated_image.png')

        with open('generated_image.png', 'rb') as img:
            bot.send_photo(message.from_user.id, img, caption="–í–∞—à–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–°—Ç—Ä–æ–≥–æ –ø–æ —Å–∫–µ—Ç—á—É')
        btn2 = types.KeyboardButton('–£–ª—É—á—à–∏—Ç—å —Å–∫–µ—Ç—á')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç', reply_markup=markup)


bot.polling(none_stop=True, interval=0)
